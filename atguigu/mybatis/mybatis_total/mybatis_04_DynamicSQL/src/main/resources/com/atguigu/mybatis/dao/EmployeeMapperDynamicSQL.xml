<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperDynamicSQL">
    <!--
    • if:判断
    • choose (when, otherwise) :分支选择 带了break的switch-case
        如果带了id用id查，如果带了lastName就用lastName查；只会进入其中一个
    • trim：字符串截取 (where(封装查询条件), set(封装修改条件))
    • foreach
    -->
    <!--查询员工，要求：携带了哪个字段查询条件就带上这个字段的值-->
    <!--List<Employee> getEmpsByConditionIF(Employee employee);-->
    <select id="getEmpsByConditionIF" resultType="com.atguigu.mybatis.bean.Employee">

        select *
        from tbl_employee
        <!--where-->
        <where>
            <!--test:判断表达式(OGNL)  c:if test
                从参数中取值进行判断
                遇见特殊符号，去写转义字符
                &&要写转义字符
            -->
            <if test="id!=null">
                id = #{id}
            </if>
            <if test="lastName != null and lastName != ''">
                and last_name like #{lastName}
            </if>
            <if test="email != null and email.trim()!=''">
                and email = #{email}
            </if>
            <!--ognl会进行字符串与数字进行转换-->
            <if test="gender==0 or gender==1">
                and gender = #{gender};
            </if>
        </where>
    </select>


    <!-- List<Employee> getEmpsByConditionTrim(Employee employee);-->
    <select id="getEmpsByConditionTrim" resultType="com.atguigu.mybatis.bean.Employee" databaseId="mysql">
        select *
        from tbl_employee
        <!--后面多出的 and 或者or where标签不能解决
            trim标签体中是整个字符串拼串后的结果。
            prefix :前缀  给拼串后的整个字符串加一个前缀
            prefixOverrides:前缀覆盖:去掉整个字符串前面多余的字符
            suffix: 后缀 给拼串后的整个字符串加一个后缀
            suffixOverrides：后缀覆盖 ：去掉整个字符串后边多余的字符
        -->
        <!--自定义字符串截取规则-->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id = #{id} and
            </if>
            <if test="lastName != null and lastName != ''">
                last_name like #{lastName} and
            </if>
            <if test="email != null and email.trim()!=''">
                email = #{email} and
            </if>
            <!--ognl会进行字符串与数字进行转换-->
            <if test="gender==0 or gender==1">
                gender = #{gender};
            </if>
        </trim>
    </select>

    <!--List<Employee> getEmpsByConditionChoose(Employee employee);-->
    <select id="getEmpsByConditionChoose" resultType="com.atguigu.mybatis.bean.Employee">
        select *
        from tbl_employee
        <where>
            <!--如果带了id用id查，如果带了lastName就用lastName查；只会进入其中一个-->
            <choose>
                <when test="id != null">
                    id=#{id}
                </when>
                <when test="lastName != null ">
                    last_name like #{lastName}
                </when>
                <when test="email != null">
                    email = #{email}
                </when>
                <otherwise>
                    gender=0
                </otherwise>
            </choose>
        </where>
    </select>

    <!--void updateEmp(Employee employee);-->
    <update id="updateEmp" parameterType="com.atguigu.mybatis.bean.Employee">
        update tbl_employee
        <!--set 标签的使用-->
        <!-- <set>
             <if test="lastName != null and lastName != ''">
                 last_name=#{lastName},
             </if>
             <if test="email != null and email != ''">
                 email=#{email},
             </if>
             <if test="gender==0 or gender==1">
                 gender=#{gender},
             </if>
         </set>-->
        <!-- trim 更新拼串-->
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName != null and lastName != ''">
                last_name=#{lastName},
            </if>
            <if test="email != null and email != ''">
                email=#{email},
            </if>
            <if test="gender==0 or gender==1">
                gender=#{gender},
            </if>
        </trim>
        <where>
            id=#{id}
        </where>

    </update>


    <!-- List<Employee> getEmpsByConditionForeach(List<Integer> ids);-->
    <select id="getEmpsByConditionForeach" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where id in
        <!--
            collection:指定要遍历的集合
                list类型的参数会特殊处理封装在map中，map的key就叫list
            item：将当前遍历出的元素赋值给指定的变量

            #{变量名}就能取出变量值也就是当前遍历出的元素
            separator:每个元素之间的分隔符
            open:遍历所有结果拼接一个开始的字符
            close:遍历所有结果拼接一个结束的字符
            index：索引，遍历list的时候index是索引,item就是值
                        遍历map的时候index表示的就是map的key，item就是map的值

        -->
        <foreach collection="ids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>

    </select>

    <!--批量保存-->
    <!-- void addEmps(@Param("emps") List<Employee> emps);-->
    <!--MySQL下批量保存，可以foreach遍历  mysql支持values(),(),()语法-->

    <!--版本一-->
    <!--  <insert id="addEmps" databaseId="mysql">
          insert into tbl_employee(last_name, email, gender, d_id)
          values
          <foreach collection="emps" item="emp" separator=",">
              (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
          </foreach>
      </insert>-->

    <!--版本二 发多条sql
            需要数据库连接属性allowMultiQueries=true
            这种分号 分割多个sql可以用于其他的批量操作(删除，修改)
         推荐使用版本一
       -->
    <insert id="addEmps" databaseId="mysql">
        <foreach collection="emps" item="emp" separator=";">
            insert into tbl_employee(
            <!--引用外部定义的sql-->
            <include refid="insertColumn"></include>
            )
            values (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>

    <!--Oracle 数据库批量保存
        Oracle 不支持values(),(),..
        Oracle支持的批量方式
        1、多个insert 包含在begin end中
        2、利用中间表
            insert into tbl_employee(id,last_name,email)
                select tbl_employee_seq.nextval,lastName,email from(
                    select 'test_a_01' lastName,'test_a_e01' email from dual
                    union
                    select 'test_a_02' lastName,'test_a_e02' email from dual
                    union
                    select 'test_a_03' lastName,'test_a_e03' email from dual
                )
    -->
    <insert id="addEmps" databaseId="oracle">

        <!--第一种批量方式-->
        <foreach collection="emps" item="emp" open="begin" close="end;">
            insert into "tbl_employee"(
            <include refid="insertColumn"></include>
            )
            VALUES("tbl_employee_seq".nextval,#{emp.lastName},#{emp.email},#{emp.gender});
        </foreach>


        <!--第二种方式-->
        <!-- insert into "tbl_employee"(ID,LAST_NAME,EMAIL,GENDER)
         select "tbl_employee_seq".nextval,lastName,email ,gender from
         <foreach collection="emps" item="emp" separator="union" open="(" close=")">
             select #{emp.lastName} lastName,#{emp.email} email,#{emp.gender} gender from dual
         </foreach>-->
    </insert>

    <!--两个内置参数
      不只是方法传递过来的参数可以被用来判断或者取值等操作...
      mybatis默认还有两个内置参数:
      _parameter: 代表整个参数就是这个参数
        单个参数：_parameter
        多个参数:参数会被封装为一个map;_parameter就是代表这个map

      _databaseId:如果配置了DatabaseIdProvider标签
            _databaseId就是代表当前数据库的别名

    -->

    <!--List<Employee> getEmpsTestInnerParameter(Employee employee);-->
    <select id="getEmpsTestInnerParameter" resultType="com.atguigu.mybatis.bean.Employee">
        <!--bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值-->
        <bind name="_lastName" value="'%' + lastName + '%'"></bind>
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter != null ">
                where last_name like #{lastName}
            </if>
        </if>

        <if test="_databaseId=='oracle'">
            select * from "tbl_employee"
            <if test="_parameter != null ">
                where last_name like #{_parameter.lastName}
            </if>
        </if>

    </select>


    <!--   sql标签
        抽取可重用的sql片段。方便后面引用
        1、sql抽取：经常将要查询的列名或者插入用的列名抽取出来，方便引用
        2、include：来引用已经抽取的
        3、include 还可以自定义一些property，sql标签内部就能使用${}获取自定义的属性 不能使用#{}
    -->
    <sql id="insertColumn">
        <if test="_databaseId=='mysql'">
            last_name, email, gender, d_id
        </if>
        <if test="_databaseId=='oracle'">
            ID,LAST_NAME,EMAIL,GENDER
        </if>
    </sql>
</mapper>   