<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperPlus">
    <!--namespace:名称空间 指定为接口的全类名
        id:唯一标识
        resultType:返回值类型
        #{id}: 从传递过来的参数中，取出id值
    -->
    <!--自定义某个javaBean的封装规则
        type:自定义规则的java类型
        id:唯一id方便引用
    -->
    <!--resultMap:自定义结果集映射规则:-->
    <resultMap id="MySimpleEmp" type="com.atguigu.mybatis.bean.Employee">
        <!--指定主键列封装规则
            id:定义主键底层会有优化(也可以用result指定)
                column：指定哪一列
                property:指定对应的javaBean属性
        -->
        <id column="id" property="id"/>
        <!--定义普通列封装规则-->
        <result column="last_name" property="lastName"/>
        <!--其他不指定的列会自动封装:我们只要写resultMap就全列的映射规则都写上-->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>


    <!--Employee getEmpById(Integer id);-->
    <select id="getEmpById" resultMap="MySimpleEmp">
        select *
        from tbl_employee
        where id = #{id}
    </select>


    <!--
    场景一：
        查询Employee的同时查询员工对应的部门
        Employee===>Department
        一个员工有与之对应的部门信息
        id last_name gender email d_id did dept_name(  Department  )
    -->
    <!--级联属性封装结果集-->
    <resultMap id="MyDifEmp" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="d_id" property="dept.id"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.deptName"/>

    </resultMap>
    <!-- association 来定义关联单个对象的封装规则   -->
    <resultMap id="MyDifEmp2" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--association可以指定联合的javaBean对象
            property:指定哪个属性是联合的对象
            javaType:制定这个属性对象的类型
        -->
        <association property="dept" javaType="com.atguigu.mybatis.bean.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>
    <!--Employee getEmpAndDeptById(Integer id);-->
    <select id="getEmpAndDeptById" resultMap="MyDifEmp2">
        select e.id        id,
               e.last_name last_name,
               e.gender    gender,
               e.email     email,
               e.d_id      d_id,
               d.id        did,
               d.dept_name dept_name
        from tbl_employee e,
             tbl_dept d
        where e.id = d.id
          and e.id = #{id}
    </select>

    <!--使用association进行分部查询:
        1、先按照员工id查询员工信息
        2、根据查询员工信息中的d_id值去部门表查出部门信息
        3、部门设置要员工中
    -->
    <resultMap id="MyEmpByStep" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法


            流程:使用select指定的方法(传入column指定的这列的值)查出对象,并封装给property指定的属性
        -->
        <association property="dept" select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById" column="d_id"/>
    </resultMap>

    <!--Employee getEmpByIdStep(Integer id);-->
    <select id="getEmpByIdStep" resultMap="MyEmpDis">
        select *
        from tbl_employee
        where id = #{id}
    </select>
    <!--分部查询可以支持延迟加载(懒加载、按需加载)
        Employee==>Dept:
            我们每次查询Employee对象的时候，都将一起查询出来。
            希望部门信息在使用的时候再去查询。
            分段查询的基础之上加上两个配置：

    -->
    <!--===========================================================================================-->

    <!--
    场景二:
        查询部门的时候，将部门对应的所有员工信息也查询出来:讲解在DepartmentMapper.xml中
    -->


    <!-- List<Employee> getEmpsByDeptId(Integer deptId);-->
    <select id="getEmpsByDeptId" resultType="com.atguigu.mybatis.bean.Employee" databaseId="mysql">
        select * from tbl_employee where d_id=#{deptId}
    </select>


    <!-- <discriminator javaType=""></discriminator>
        鉴别器:mybatis可以使用discriminator判断某列的值,然候根据某列的值改变封装行为
        封装Employee为例
            如果查出的的女生,把部门信息查询出来，否则不查询
            如果是男生，把last_name这一列的值赋值给email
    -->
    <resultMap id="MyEmpDis" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

        <!--column:指定判定的列名
            javaType:列值对应的java类型 不能缺少(或者写resultMap)
        -->
        <discriminator javaType="string" column="gender">
            <!--女生  resultType:指定封装结果类型-->
            <case value="0" resultType="com.atguigu.mybatis.bean.Employee">
                <association property="dept" select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById" column="d_id"/>
            </case>
            <!--男生 把last_name这一列的值赋值给email-->
            <case value="1" resultType="com.atguigu.mybatis.bean.Employee">
              <!--  <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="gender" property="gender"/>-->
                <result column="last_name" property="email"/>
            </case>
        </discriminator>

    </resultMap>
</mapper>