<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">
    <!--namespace:名称空间 指定为接口的全类名
        id:唯一标识
        resultType:返回值类型
        #{id}: 从传递过来的参数中，取出id值
    -->

    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee" databaseId="mysql">
        select * from tbl_employee where id = #{id}
    </select>

    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee" databaseId="oracle">
        select * from "tbl_employee" where id = #{id}
    </select>

    <!--多个参数-->
    <!--Employee getEmpByIdAndLastName(Integer id,String lastName);-->
    <select id="getEmpByIdAndLastName" resultType="com.atguigu.mybatis.bean.Employee" databaseId="mysql">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>

    <select id="getEmpByMap" resultType="com.atguigu.mybatis.bean.Employee" databaseId="mysql">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>

    <select id="getEmpByList" resultType="com.atguigu.mybatis.bean.Employee" databaseId="mysql">
        select * from tbl_employee where id=#{list[0]} and last_name=#{list[1]}
    </select>



    <!--  List<Employee> getEmpsByLastNameLike(String lastName);-->
    <!--resultType:如果返回的是一个集合要写,要写集合中元素的类型-->
    <select id="getEmpsByLastNameLike" resultType="com.atguigu.mybatis.bean.Employee" databaseId="mysql">
            select * from tbl_employee where last_name like #{lastName};
    </select>
    <!-- Map<String,Object> getEmpByIdReturnMap(Integer id);-->
    <select id="getEmpByIdReturnMap"  resultType="map"  databaseId="mysql">
        select * from tbl_employee where id=#{id}
    </select>
    <!--Map<Integer,Employee> getEmpsByLastNameLikeReturnMap(String lastName);-->
    <select id="getEmpsByLastNameLikeReturnMap" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName};
    </select>


    <!--void addEmp(Employee employee);-->
    <!--parameterType:可以省略

        获取自增主键
        mysql支持自增主键，自增主键的值的获取，mybatis也是利用statement.getGeneratedKeys()
        useGeneratedKeys="true"; 使用自增主键获取主键值策略
        keyProperty: 指定对应的主键属性，也就是mybatis获取到主键值以后,将这个值封装给javaBean的哪个属性
    -->
    <insert id="addEmp" parameterType="com.atguigu.mybatis.bean.Employee"  useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name, gender, email) VALUES(#{lastName},#{gender},#{email})
    </insert>

<!--
    Oracle不支持自增;Oracle使用序列模拟自增，每次插入的数据的主键是从序列中拿到的值；
    如何获取到这个值：

-->
    <insert id="addEmp" parameterType="com.atguigu.mybatis.bean.Employee"  databaseId="oracle">
        <!--keyProperty：查出的主键值封装给javaBean的哪个属性
            order="BEFORE" :当前sql在插入sql之前执行
                   AFTER :之后
           resultType:查出的数据的返回值类型
           BEFORE运行顺序:
                先运行查询id的sql:查出id值封装给javaBean的id属性
                再运行插入sql:就可以取出id属性对应的值
           AFTER运行顺序：
                先插入
                再获取id
                   <selectKey keyProperty="id" order="AFTER" resultType="integer">
                     select "tbl_employee_seq".currval from dual
                </selectKey>
                insert into "tbl_employee" values("tbl_employee_seq".nextval,#{lastName},#{email},#{gender})

        -->
        <selectKey keyProperty="id" order="BEFORE" resultType="integer">
            <!--编写查询主键的sql语句-->
            select "tbl_employee_seq".nextval from dual
        </selectKey>
        <!--插入时的主键是从序列中拿到的-->
        insert into "tbl_employee" values(#{id},#{lastName},#{email},#{gender})

    </insert>





    <!--void updateEmp(Employee employee);-->
    <update id="updateEmp" >
        update tbl_employee
        set last_name=#{lastName},email=#{email},gender=#{gender}
        where id=#{id}
    </update>

    <!--void deleteEmpById(Integer id);-->
    <delete id="deleteEmpById">
        delete from tbl_employee where id=#{id}
    </delete>
</mapper>