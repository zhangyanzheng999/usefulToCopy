<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.neu.his.dao.RegTypeMapper">
  <resultMap id="BaseResultMap" type="cn.neu.his.bean.RegType">
    <id column="Reg_Type_ID" jdbcType="INTEGER" property="regTypeId" />
    <result column="Reg_Type_Code" jdbcType="VARCHAR" property="regTypeCode" />
    <result column="Reg_Type_Name" jdbcType="VARCHAR" property="regTypeName" />
    <result column="Reg_Shunxu" jdbcType="INTEGER" property="regShunxu" />
    <result column="Reg_Cost" jdbcType="REAL" property="regCost" />
    <result column="Reg_LimitNum" jdbcType="INTEGER" property="regLimitnum" />
    <result column="Reomve_Sign" jdbcType="INTEGER" property="reomveSign" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    Reg_Type_ID, Reg_Type_Code, Reg_Type_Name, Reg_Shunxu, Reg_Cost, Reg_LimitNum, Reomve_Sign
  </sql>
  <select id="selectByExample" parameterType="cn.neu.his.bean.RegTypeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from register_type
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from register_type
    where Reg_Type_ID = #{regTypeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from register_type
    where Reg_Type_ID = #{regTypeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.neu.his.bean.RegTypeExample">
    delete from register_type
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.neu.his.bean.RegType">
    insert into register_type (Reg_Type_ID, Reg_Type_Code, Reg_Type_Name, 
      Reg_Shunxu, Reg_Cost, Reg_LimitNum, 
      Reomve_Sign)
    values (#{regTypeId,jdbcType=INTEGER}, #{regTypeCode,jdbcType=VARCHAR}, #{regTypeName,jdbcType=VARCHAR}, 
      #{regShunxu,jdbcType=INTEGER}, #{regCost,jdbcType=REAL}, #{regLimitnum,jdbcType=INTEGER}, 
      #{reomveSign,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.neu.his.bean.RegType">
    insert into register_type
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="regTypeId != null">
        Reg_Type_ID,
      </if>
      <if test="regTypeCode != null">
        Reg_Type_Code,
      </if>
      <if test="regTypeName != null">
        Reg_Type_Name,
      </if>
      <if test="regShunxu != null">
        Reg_Shunxu,
      </if>
      <if test="regCost != null">
        Reg_Cost,
      </if>
      <if test="regLimitnum != null">
        Reg_LimitNum,
      </if>
      <if test="reomveSign != null">
        Reomve_Sign,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="regTypeId != null">
        #{regTypeId,jdbcType=INTEGER},
      </if>
      <if test="regTypeCode != null">
        #{regTypeCode,jdbcType=VARCHAR},
      </if>
      <if test="regTypeName != null">
        #{regTypeName,jdbcType=VARCHAR},
      </if>
      <if test="regShunxu != null">
        #{regShunxu,jdbcType=INTEGER},
      </if>
      <if test="regCost != null">
        #{regCost,jdbcType=REAL},
      </if>
      <if test="regLimitnum != null">
        #{regLimitnum,jdbcType=INTEGER},
      </if>
      <if test="reomveSign != null">
        #{reomveSign,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.neu.his.bean.RegTypeExample" resultType="java.lang.Long">
    select count(*) from register_type
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update register_type
    <set>
      <if test="record.regTypeId != null">
        Reg_Type_ID = #{record.regTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.regTypeCode != null">
        Reg_Type_Code = #{record.regTypeCode,jdbcType=VARCHAR},
      </if>
      <if test="record.regTypeName != null">
        Reg_Type_Name = #{record.regTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.regShunxu != null">
        Reg_Shunxu = #{record.regShunxu,jdbcType=INTEGER},
      </if>
      <if test="record.regCost != null">
        Reg_Cost = #{record.regCost,jdbcType=REAL},
      </if>
      <if test="record.regLimitnum != null">
        Reg_LimitNum = #{record.regLimitnum,jdbcType=INTEGER},
      </if>
      <if test="record.reomveSign != null">
        Reomve_Sign = #{record.reomveSign,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update register_type
    set Reg_Type_ID = #{record.regTypeId,jdbcType=INTEGER},
      Reg_Type_Code = #{record.regTypeCode,jdbcType=VARCHAR},
      Reg_Type_Name = #{record.regTypeName,jdbcType=VARCHAR},
      Reg_Shunxu = #{record.regShunxu,jdbcType=INTEGER},
      Reg_Cost = #{record.regCost,jdbcType=REAL},
      Reg_LimitNum = #{record.regLimitnum,jdbcType=INTEGER},
      Reomve_Sign = #{record.reomveSign,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.neu.his.bean.RegType">
    update register_type
    <set>
      <if test="regTypeCode != null">
        Reg_Type_Code = #{regTypeCode,jdbcType=VARCHAR},
      </if>
      <if test="regTypeName != null">
        Reg_Type_Name = #{regTypeName,jdbcType=VARCHAR},
      </if>
      <if test="regShunxu != null">
        Reg_Shunxu = #{regShunxu,jdbcType=INTEGER},
      </if>
      <if test="regCost != null">
        Reg_Cost = #{regCost,jdbcType=REAL},
      </if>
      <if test="regLimitnum != null">
        Reg_LimitNum = #{regLimitnum,jdbcType=INTEGER},
      </if>
      <if test="reomveSign != null">
        Reomve_Sign = #{reomveSign,jdbcType=INTEGER},
      </if>
    </set>
    where Reg_Type_ID = #{regTypeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.neu.his.bean.RegType">
    update register_type
    set Reg_Type_Code = #{regTypeCode,jdbcType=VARCHAR},
      Reg_Type_Name = #{regTypeName,jdbcType=VARCHAR},
      Reg_Shunxu = #{regShunxu,jdbcType=INTEGER},
      Reg_Cost = #{regCost,jdbcType=REAL},
      Reg_LimitNum = #{regLimitnum,jdbcType=INTEGER},
      Reomve_Sign = #{reomveSign,jdbcType=INTEGER}
    where Reg_Type_ID = #{regTypeId,jdbcType=INTEGER}
  </update>
</mapper>